import pytest
import sillyorm
import tempfile
import pathlib
import sqlalchemy
from sillyorm.exceptions import SillyORMException
from .libtest import with_test_registry, assert_db_columns


@with_test_registry()
def test_migration_helpers(registry):
    class TestModel1(sillyorm.model.Model):
        _name = "test_model"

        field1 = sillyorm.fields.String()

    class TestModel2(sillyorm.model.Model):
        _name = "test_model"

        field1 = sillyorm.fields.String(length=123)
        field2 = sillyorm.fields.Text()

    tmpdir_obj = tempfile.TemporaryDirectory()
    tmpdir = pathlib.Path(tmpdir_obj.name)
    ALEMBIC_MIGRATION_FOLDER = pathlib.Path(f"{tmpdir}/migrations")
    ALEMBIC_MIGRATION_FOLDER.mkdir(parents=True, exist_ok=True)

    def do_migration(model):
        registry.reset_full()
        registry.register_model(model)
        registry.resolve_tables()
        sillyorm.migration_helpers.helper_do_migrate()
        assert sillyorm.migration_helpers.helper_gen_migrations("autogenerated")
        sillyorm.migration_helpers.helper_do_migrate()
        assert not sillyorm.migration_helpers.helper_gen_migrations("autogenerated")
        registry.init_db_tables(automigrate="none")

    sillyorm.migration_helpers.helper_init(registry, str(ALEMBIC_MIGRATION_FOLDER))

    do_migration(TestModel1)

    assert_db_columns(
        registry,
        "test_model",
        [
            ("id", sqlalchemy.sql.sqltypes.INTEGER()),
            ("field1", sqlalchemy.sql.sqltypes.VARCHAR(length=255)),
        ],
    )

    do_migration(TestModel2)

    assert_db_columns(
        registry,
        "test_model",
        [
            ("id", sqlalchemy.sql.sqltypes.INTEGER()),
            ("field1", sqlalchemy.sql.sqltypes.VARCHAR(length=123)),
            ("field2", sqlalchemy.sql.sqltypes.TEXT()),
        ],
    )
